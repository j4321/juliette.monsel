#! /usr/bin/python3
# -*- coding: utf-8 -*-
"""
Generate the files publications-list.rst (list of publications) and
conf-list.rst (list of conferences) from the bibtex files publications.bib
and conf.bib.
Also generate news.rst from news.json (TODO: directly generate news from bib but issue with formatting the titles at the moment)
"""
import bibtexparser
import json
import datetime


def generate_publi():
    """Generate file publications-list.rst"""
    with open('publications.bib') as bibtex_file:
        bib_database = bibtexparser.load(bibtex_file)

    # ENTRYTYPE: article = published article, misc = preprint, book = book
    entries = {'article': [], 'misc': [], 'book': []}

    for entry in bib_database.entries:
        entries[entry['ENTRYTYPE']].append(entry)

    # books

    if entries['book']:
        books = """
Books
-----
.. container:: publi

    .. bibliography:: publications.bib
        :list: bullet
        :filter: (not cited) and (type == "book")
        :style: mystyle
"""
    else:
        books = ""

    # preprints

    if entries['misc']:
        preprints = """
Preprints
---------
.. container:: publi

    .. bibliography:: publications.bib
        :list: bullet
        :filter: (not cited) and (type == "misc")
        :style: mystyle

Articles
--------
"""
    else:
        preprints = """
Articles
--------
    """

    # published articles
    years = set()
    for entry in entries['article']:
        year = entry.get('year', '')
        if year:
            years.add(int(year))

    years = sorted(years, reverse=True)
    publi = """
.. rubric:: {year}

.. container:: publi

    .. bibliography:: publications.bib
        :list: bullet
        :filter: (not cited) and (type == "article") and (year == "{year}")
        :style: mystyle
"""

    with open("publications-list.rst", 'w') as file:
        file.write(".. ~ This file is generated by the script rst_from_bib.py during the compilation, any manual edit will be overriden.\n\n")
        file.write(preprints)
        file.write('\n'.join([publi.format(year=year) for year in years]))
        file.write(books)


def generate_conf():
    """Generate file conf-list.rst"""
    with open('conf.bib') as bibtex_file:
        bib_database = bibtexparser.load(bibtex_file)

    dates = {'poster': set(),
             'seminar': set(),
             'invited': set(),
             'contributed': set()}

    for entry in bib_database.entries:
        year = entry.get('year', '')
        kind = entry.get('keywords', '')
        dates[kind].add(year)

    headers = {
        'invited': "\nInvited talks" \
                   "\n-------------",
        'contributed': "\nContributed talks" \
                       "\n-----------------",
        'seminar': "\nInvited seminars" \
                   "\n----------------",
        'poster': "\nContributed posters" \
                  "\n-------------------"
    }

    publi = """
.. rubric:: {year}

.. container:: publi

    .. bibliography:: conf.bib
        :list: bullet
        :filter: (not cited) and (year == "{year}") and (keywords == "{kind}")
        :style: mystyle
"""
    with open("conf-list.rst", 'w') as file:
        file.write(".. ~ This file is generated by the script rst_from_bib.py during the compilation, any manual edit will be overriden.\n\n")
        for kind in headers:
            years = sorted(dates[kind], reverse=True)
            file.write(headers[kind])
            file.write('\n'.join([publi.format(year=year, kind=kind) for year in years]))




def generate_news():
    max_time = datetime.timedelta(days=365) # only less than one year old
    min_entries = 2
    today = datetime.datetime.now()

    with open("news.json") as file:
        news_dict = json.load(file)
    news = []
    for key, data in news_dict.items():
        data["date_sort"] = datetime.datetime.strptime(data["date"], "%B %d, %Y")
        data["key"] = key
        # ~if today - data["date_sort"] > max_time:
            # ~continue
        if "note" in data and data["note"].strip():
            data["note"] = f" -- {data['note']}"
        else:
            data["note"] = ""

        data["summary"] = "\n    ".join([line.strip() for line in data["summary"].splitlines()])
        links = ["`{reference} <{URL}>`_".format(**link) for link in data["links"]]
        data["formatted_links"] = " -- ".join(links)
        news.append(data)

    news = sorted(news, key=lambda x: x["date_sort"], reverse=True)

    try:
        if today - news[min_entries]["date_sort"] > max_time:
            news = news[:min_entries]
        else:
            i = min_entries + 1
            while i < len(news) and today - news[i]["date_sort"] < max_time:
                i += 1
            news = news[:i]
    except IndexError:
        pass

    # ~max_entries = 3
    # ~news = news[:max_entries]

    news_template = """
- *{header}* -- {date}{note}

.. admonition::  {title}
    :class: preprint

    *{authors}*

    .. image:: assets/{key}.svg
        :align: right

    {summary}

    {formatted_links}
    """

    with open("news.rst", 'w') as file:
        file.write(".. ~ This file is generated by the script rst_from_bib.py during the compilation, any manual edit will be overriden.\n\n")
        file.write('\n'.join([news_template.format(**data) for data in news]))


if __name__ == '__main__':
    generate_publi()
    generate_conf()
    generate_news()
